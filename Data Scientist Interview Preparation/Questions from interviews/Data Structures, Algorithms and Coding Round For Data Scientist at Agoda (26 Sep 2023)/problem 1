Problem Description:
You are standing on a unique diamond-shaped platform composed of 5 tiles. These tiles are positioned at coordinates: (-1,0), (0,-1), (0,0), (0,1), and (1,0).

From a starting position (xs,ys), you make random moves in one of four directions: left (decrease x by 1), right (increase x by 1), up (increase y by 1), or down (decrease y by 1). Each direction has the same probability and the direction of each move is entirely independent of previous moves.

Determine the probability that you can reach a given destination (xe,ye) without stepping off the diamond platform.

Constraints:
(xs, ys) must be one of: (-1,0), (0,-1), (0,0), (0,1), (1,0)
(xe, ye) must also be one of the above coordinates.
Starting and ending coordinates are distinct: xs != xe or ys != ye

Input:
A single line containing four integers, denoting xs, ys, xe, ye respectively.

Output:
A single line showing the probability that you'll reach the destination before stepping off the platform.

Sample input:
-1 0 0 0

Sample Output:
0.25

Explanation:
From the starting position, you have a 25% chance of moving right (and thus reaching the destination). Any other move would result in falling off the platform.

    [execution time limit] 4 seconds (py3)

    [memory limit] 1 GB

    [input] integer xs

    The x-coordinate of the starting position.

    [input] integer ys

    The y-coordinate of the starting position.

    [input] integer xe

    The x-coordinate of the end position.

    [input] integer ye

    The y-coordinate of the end position.

    [output] float

    Probability to reach end position before falling of platform.

[Python 3] Syntax Ti
























valid_positions = [(-1,0), (0,-1), (0,0), (0,1), (1,0)]

def get_steps(xs, ys, xe, ye):
    xsteps = xe - xs
    ysteps = ye - ys
    return (xsteps, ysteps)


def get_next_position(xs, ys, direction):
    if direction == 'left':
        xs -= 1
    elif direction == 'right':
        xs += 1
    elif direction == 'up':
        ys += 1
    elif direction == 'down':
        ys -= 1
    
    return (xs, ys)


    
def solution(xs, ys, xe, ye):
    ret = 0
    
    if (xe, ye) in valid_positions and (xs, ys) in valid_positions and (xs, ys) != (xe, ye):
        xsteps, ysteps = get_steps(xs, ys, xe, ye)
        steps_count = abs(xsteps) + abs(ysteps)
        
        if steps_count == 1 and (xs, ys) == (0, 0):
            ret = 0.307692
        elif steps_count == 1 and (xe, ye) == (0, 0):
            ret = 0.25
        elif steps_count == 2:
            ret = 0.076923
    
    return ret
    
    


