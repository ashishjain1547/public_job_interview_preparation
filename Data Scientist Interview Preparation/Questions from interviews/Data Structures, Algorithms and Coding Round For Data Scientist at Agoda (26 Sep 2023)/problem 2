There are two operators:

    operator1: adds x to current number
    operator2: multiplies current number by y

where the values of x an y are given and fixed. The starting number is 1 and the goal is to get to number t by sequentially applying operator1 and operator2. You have to maximize the number of times you use operator2. For maximum usage of operator 2, you have to minimize the number of times you use operator 1.

Constraints:
2 <= x <= 1000
2 <= y <= 1000
1 <= t <= 10^20

Input: t, x, y

Output in case there is a solution:
List of strings where:

    Element 1: "operator_add" or "operator_multiply" followed by how many times you want to apply it.
    Element 2: "operator_add" or "operator_multiply" followed by how many times you want to apply it to result of previous line.
    ...

The solution should be returned in a compact format in the sense that if element i corresponds to operator_add, then element i+1 corresponds to operator_multiply and vice versa.

Output in case there is no solution:
List with one element: "no_solution".

Sample input:
t = 54
x = 1
y = 3

Sample output:
["operator_add 1", "operator_multiply 3"]

Explanation: ((1 + 1) times 3^3) = 54
Operator2 can be used maximally 3 times because 3^4 > 54. For operator2 being used three times, operator1 needs to be used at least once because 3^3 is not equal to 54.

Sample input:
t = 3
x = 4
y = 4

Sample output:
["no_solution"]

Explanation: every operator increase the number and applying any operator once already results in a number that is too big.

    [execution time limit] 4 seconds (py3)

    [memory limit] 1 GB

    [input] integer64 t

    Target number: the number you want to reach by sequentially applying the operators.

    [input] integer64 x

    By how much you increase the current result if you apply operator1.

    [input] integer64 y

    By how much you multiply the current result if you apply operator2.

    [output] array.string

    List of strings where element i equals "operator_add" or "operator_multiply" followed by how many times you want to apply it. In case there is no solution, output is ["no_solution"].






































def get_calc_val(seq, x, y):
    ret = 1
    for i in seq:
        if i == 'm':
            ret *= y 
        elif i == 'a':
            ret += x
    return ret     

def get_max_m(sequences):
    max_m = 0
    for i in sequences:
        if i['m_count'] > max_m:
            max_m = i['m_count']
    return max_m  

def get_max_m_seq(sequences, max_m):
    for i in range(len(sequences)):
        if sequences[i]['m_count'] == max_m:
            return i
            
def get_seq(t, x, y):
    max_m = 0
    
    elem = {
        'result': -1,
        'seq': [],
        'm_count': 0
    }
    
    sequences = []
    
    running_first_time_flag = True
    flag_find_t = True 
    ret_seq = []
    
    while flag_find_t:
        if len(sequences) == 0 and running_first_time_flag:
            running_first_time_flag = False
            seq = ['a']
            elem = {
                'seq': seq,
                'result': get_calc_val(seq, x, y),
                'm_count': seq.count('m')
            }
                        
            sequences.append(elem)
            
            seq = ['m']
            elem = {
                'seq': seq,
                'result': get_calc_val(seq, x, y),
                'm_count': seq.count('m')
            }
            
            sequences.append(elem)
            max_m = get_max_m(sequences)
            
        else:
            ix = get_max_m_seq(sequences, max_m)
            seq = sequences.pop(ix)
            
            if seq['result'] < t:
                elem = {
                    'seq': seq['seq'] + ['a'],
                    'result': get_calc_val(seq, x, y),
                    'm_count': seq['seq'].count('m')
                }
                
                sequences.append(elem)
                
                elem = {
                    'seq': seq['seq'] + ['m'],
                    'result': get_calc_val(seq, x, y),
                    'm_count': seq['seq'].count('m')
                }
                
                sequences.append(elem)
                
                max_m = get_max_m(sequences)
                
            elif seq['result'] == t:
                flag_find_t = False
                ret_seq = seq
                
            elif seq['result'] > t:
                if len(sequences) == 0:
                    flag_find_t = False
                
    return ret_seq
                
            
            
    
    

def solution(t, x, y):
    print(get_seq(t, x, y))
    
Tests passed: 0/3. Execution time limit exceeded on test 1: Program exceeded the execution time limit. Make sure that it completes execution in a few seconds for any possible input.
